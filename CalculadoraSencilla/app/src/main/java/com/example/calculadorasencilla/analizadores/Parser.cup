package com.example.calculadorasencilla.analizadores;

import java.util.ArrayList;
import java.util.List;
import java.util.LinkedList;
import java_cup.runtime.*;

action code {:

    private List<String> errorsList = new LinkedList<>();

    public List<String> getErrorsList() {
        return errorsList;
    }

    private void report_error(String message, Object err) {
        String errorMessage = (err != null) ? err.toString() : "Error desconocido";
        System.out.println(message + ": " + errorMessage);
        errorsList.add(message + ": " + errorMessage);
    }

    public double performOperation(double leftOperand, String operator, double rightOperand) {
        double result = 0;
        switch (operator) {
            case "+":
                result = leftOperand + rightOperand;
                break;
            case "-":
                result = leftOperand - rightOperand;
                break;
            case "*":
                result = leftOperand * rightOperand;
                break;
            case "/":
                if (rightOperand == 0) {
                    System.out.println("Error: División por cero.");
                    return 0;
                }
                result = leftOperand / rightOperand;
                break;
            default:
                System.out.println("Operador no reconocido: " + operator);
                return 0;
        }
        System.out.println("Operación: " + leftOperand + " " + operator + " " + rightOperand + " = " + result);
        return result;
    }

    public void printResult(Double result) {
        if (result == null) {
            System.out.println("Intento de agregar un resultado nulo");
        } else {
            System.out.println("Resultado: " + result);
        }
    }

:}

terminal SUMA, RESTA, MULTIPLICACION, DIVISION, PAR_IZQ, PAR_DER;
terminal Double NUMERO;

non terminal programa, expresion, errorSintactico;

precedence left SUMA, RESTA;
precedence left MULTIPLICACION, DIVISION;

start with programa;

programa ::= expresion:e1 SUMA expresion:e2 {:
                Double left = (Double)e1;
                Double right = (Double)e2;
                double result = performOperation(left, "+", right);
                printResult(result);
                RESULT = result;
            :}
           | expresion:e1 RESTA expresion:e2 {:
                Double left = (Double)e1;
                Double right = (Double)e2;
                double result = performOperation(left, "-", right);
                printResult(result);
                RESULT = result;
            :}
           | expresion:e1 MULTIPLICACION expresion:e2 {:
                Double left = (Double)e1;
                Double right = (Double)e2;
                double result = performOperation(left, "*", right);
                printResult(result);
                RESULT = result;
            :}
           | expresion:e1 DIVISION expresion:e2 {:
                Double left = (Double)e1;
                Double right = (Double)e2;
                double result = performOperation(left, "/", right);
                printResult(result);
                RESULT = result;
            :}
           | error:err {:
                report_error("Error en el comando", err);
                RESULT = null;
            :}
           | /*EOF*/ {:
                /* Fin del programa */
                RESULT = null;
            :};

expresion ::= NUMERO:n {: RESULT = n.doubleValue(); :}
           | PAR_IZQ expresion:e PAR_DER {: RESULT = e; :}
           | expresion:e1 SUMA expresion:e2 {: RESULT = performOperation((Double)e1, "+", (Double)e2); :}
           | expresion:e1 RESTA expresion:e2 {: RESULT = performOperation((Double)e1, "-", (Double)e2); :}
           | expresion:e1 MULTIPLICACION expresion:e2 {: RESULT = performOperation((Double)e1, "*", (Double)e2); :}
           | expresion:e1 DIVISION expresion:e2 {: RESULT = performOperation((Double)e1, "/", (Double)e2); :};